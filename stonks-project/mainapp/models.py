from django.db import models
from django.contrib.auth.models import User



##---------------------------------------LIVE UPDATE STOCK:
class StockDetail(models.Model):
    """
    Tabela com as buscas automatizadas do celery, separadas
    por ativo e usuario.
    """
    stock = models.CharField(max_length=255, unique=True)
    user = models.ManyToManyField(User)


##------------------------------------------------MERCADOS:
class Mercado(models.Model):
    """
    Tabela contendo os mercados existentes em database
    IBOV, IFIX, outros por vir.
    
    Returns:
        String: nome do mercado
    """
    name = models.CharField(max_length=20)

    def __str__(self):
        return self.name


##------------------------------------------------ATIVOS:
class Ativo(models.Model):
    """
    Tabela contendo todos os ativos de todos os mercados
    existentes em database.

    Returns:
        String: nome(ticker) do ativo
    """
    # user = models.ManyToManyField(User)
    mercado = models.ForeignKey(Mercado, on_delete=models.CASCADE)
    ticker = models.CharField(max_length=30, default="CHOOSE/ADD")

    class Meta:
        # ordena por ordem alfabetica
        ordering = ['ticker']
    
    def __str__(self):
        return self.ticker



##---------------------------------------CARTEIRA DE ATIVOS:
class CarteiraAtivo(models.Model):
    """
    Tabela contendo um ativo para adicao em carteira do usuario.

    Returns:
        String: nome(ticker) do ativo da carteira
    """
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    ativo = models.ForeignKey(Ativo, on_delete=models.SET_NULL, null=True)
    preco_medio = models.DecimalField(max_digits=6, decimal_places=2, default=0.00)
    quantidade = models.IntegerField(default=0)
    nota = models.IntegerField(default=0)

    class Meta:
        ordering = ['nota']

    def __str__(self):
        return self.ativo.ticker #, self.user  #returns a tuple?!??



##-------------------------------------------------ALERTAS:
class Alerta(models.Model): # ID is autogenerated
    """
    Tabela contendo alerta do usuario para ser utilizado pelas tasks
    ou exibido para o usuario nas paginas alertas e profile

    Returns:
        String: nome(ticker) do ativo
    """
    host = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    email = models.EmailField(default="")
    mercado = models.ForeignKey(Mercado, on_delete=models.SET_NULL, null=True)
    ativo = models.ForeignKey(Ativo, on_delete=models.SET_NULL, null=True)
    compra = models.DecimalField(max_digits=6, decimal_places=2, default=0.00)
    venda = models.DecimalField(max_digits=6, decimal_places=2, default=0.00)
    periodo = models.IntegerField(default=30)
    duracao = models.IntegerField(default=15)
    
    updated = models.DateTimeField(auto_now=True) # snapshot every time
    created = models.DateTimeField(auto_now_add=True) # snapshot once
    
    # classify in order (- to reverse, newest 1st)
    class Meta:
        ordering = ['-updated', '-created']
    
    def __str__(self):
        return self.ativo.ticker  ## MUST BE A STRING! WANT TICKER!!!!
        



##------------------------------------------------TOPIC:
class Topic(models.Model):
    """
    Tabela contendo os topicos para as salas de bate papo

    Returns:
        String: nome do topico da sala
    """
    name = models.CharField(max_length=20)

    def __str__(self):
        return self.name


##-------------------------------------------------ROOM:
class Room(models.Model): # ID is autogenerated
    """
    Tabela contendo as salas individuais de bate papo

    Returns:
        String: titulo da sala de bate papo
    """
    host = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    #a topic can only have one room
    #a room can have many topics
    topic = models.ForeignKey(Topic, on_delete=models.SET_NULL, null=True)
    name = models.CharField(max_length=10)
    description = models.TextField(null=True, blank=True) # can be empty
    participants = models.ManyToManyField(User, related_name='participants', blank=True)
    updated = models.DateTimeField(auto_now=True) # snapshot every time
    created = models.DateTimeField(auto_now_add=True) # snapshot once
    
    # classify in order (- to reverse, newest 1st)
    class Meta:
        ordering = ['-updated', '-created']
    
    def __str__(self):
        return self.name


##------------------------------------------------MESSAGE:
## a user can have many messages
## a message can only have one user
class Message(models.Model):  # one to many relationship
    """
    Tabela que contem as mensagens dos usuarios, criadas
    dentro de salas de bate papo

    Returns:
        String: corpo da mensagem
    """
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    # if Room gets deleted, all children gets deleted
    room = models.ForeignKey(Room, on_delete=models.CASCADE)
    body = models.TextField()
    updated = models.DateTimeField(auto_now=True) # snapshot every time
    created = models.DateTimeField(auto_now_add=True) # snapshot once

    class Meta:
       ordering = ['-updated', '-created']

    def __str__(self):
        return self.body[0:50]  # limits message to 50 chars


